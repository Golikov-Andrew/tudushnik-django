class MyElement extends HTMLElement {
    constructor() {
        super();
        // элемент создан
    }

    connectedCallback() {
        // браузер вызывает этот метод при добавлении элемента в документ
        // (может вызываться много раз, если элемент многократно добавляется/удаляется)
        // Тут же происходит рендеринг
    }

    disconnectedCallback() {
        // браузер вызывает этот метод при удалении элемента из документа
        // (может вызываться много раз, если элемент многократно добавляется/удаляется)
    }

    static get observedAttributes() {
        return [/* массив имён атрибутов для отслеживания их изменений */];
    }

    attributeChangedCallback(name, oldValue, newValue) {
        // вызывается при изменении одного из перечисленных выше атрибутов
    }

    adoptedCallback() {
        // вызывается, когда элемент перемещается в новый документ
        // (происходит в document.adoptNode, используется очень редко)
    }

    // у элемента могут быть ещё другие методы и свойства
}

// сообщим браузеру, что <my-element> обслуживается нашим новым классом
customElements.define("my-element", MyElement);

// Также мы можем использовать document.createElement('my-element')
// Имя пользовательского элемента должно содержать дефис!

// customElements.get(name) – возвращает класс пользовательского элемента с указанным именем name,
// customElements.whenDefined(name) – возвращает промис, который переходит в состояние «успешно выполнен»
// со значением конструктора пользовательского элемента,
// когда определён пользовательский элемент с указанным именем name.

