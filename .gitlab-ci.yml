stages:
  - linting
  - test
  - build
  - deploy

variables:
  GIT_CURL_VERBOSE: 1
  GIT_TRACE: 1
  DOCKER_TLS_CERTDIR: ""

before_script:
  - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY

flake8:
  stage: linting
  image: python:3.8
  script:
    - pip install flake8
    - flake8 --verbose .
  allow_failure: true
  tags:
    - docker

docker build:
  stage: build
  image: docker:20.10
  services:
    - docker:dind
  script:
    #- docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG -f Dockerfile.python .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  tags:
    - docker

# deploy:
#   stage: deploy
#   image: docker/compose:latest
#   services:
#     - docker:dind
#   before_script:
#     - docker info
#     - docker-compose --version
#     - echo $TDM_DATABASE_DTBS
#   script:
#     - docker-compose down
#     - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
#     - docker-compose up
#   tags:
#     - docker

deploy to dev:
  stage: deploy
  script:
   # - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    #- docker compose down
    - ls -la
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
    - docker run -d -p 8000:8000 -n tdm $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
    #- docker compose up --build -d
  tags:
    - dev-shell