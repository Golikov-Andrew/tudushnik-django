/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./games/static/games/js/durak/deck.js":
/*!*********************************************!*\
  !*** ./games/static/games/js/durak/deck.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Card: () => (/* binding */ Card),\n/* harmony export */   Deck: () => (/* binding */ Deck)\n/* harmony export */ });\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ \"./games/static/games/js/durak/utils.js\");\n\n\nclass Deck {\n    constructor(game) {\n        this.game = game\n        this.deck = []\n    }\n\n    pop() {\n        return this.deck.pop()\n    }\n\n    push(elem) {\n        return this.deck.push(elem)\n    }\n\n    shuffle() {\n        (0,_utils__WEBPACK_IMPORTED_MODULE_0__.shuffle)(this.deck)\n    }\n\n    length() {\n        return this.deck.length\n    }\n\n    item(i) {\n        return this.deck[i]\n    }\n}\n\nclass Card {\n    constructor(suit, color, html_entity, title, val) {\n        this.color = color;\n        this.html_entity = html_entity;\n        this.title = title;\n        this.suit = suit;\n        this.val = val;\n        this.elem = document.createElement('div')\n        this.elem.setAttribute('title', `${this.suit} ${this.val}`)\n        this.elem.classList.add('playing_card')\n        this.elem.addEventListener('click', () => {\n            if (this.elem.classList.contains('selected')) {\n                this.elem.classList.remove('selected')\n            } else {\n                this.elem.classList.add('selected')\n            }\n        })\n\n    }\n\n    show_face() {\n        this.elem.setAttribute('data-suit', this.suit)\n        this.elem.setAttribute('data-val', this.val)\n        this.elem.innerHTML = `<span style=\"color: ${this.color}\">${this.html_entity}</span>` +\n            `<span>${this.title}</span>`\n    }\n\n    show_back() {\n        this.elem.removeAttribute('data-suit')\n        this.elem.removeAttribute('data-val')\n        // this.elem.innerHTML = `<span>X</span>`\n        this.elem.innerHTML = `<span style=\"color: ${this.color}\">${this.html_entity}</span>` +\n            `<span>${this.title}</span>`\n    }\n}\n\n\n\n//# sourceURL=webpack://tudushnik-pack/./games/static/games/js/durak/deck.js?");

/***/ }),

/***/ "./games/static/games/js/durak/index.js":
/*!**********************************************!*\
  !*** ./games/static/games/js/durak/index.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _player__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./player */ \"./games/static/games/js/durak/player.js\");\n/* harmony import */ var _deck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./deck */ \"./games/static/games/js/durak/deck.js\");\n/* harmony import */ var _variables__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./variables */ \"./games/static/games/js/durak/variables.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils */ \"./games/static/games/js/durak/utils.js\");\n\n\n\n\n\n\nclass DurakGame {\n    constructor(game_state, client_id, status) {\n        this.initial_game_state = game_state\n        this.client_id = client_id\n        this.status = status\n        this.opponents_container = document.getElementById('opponents')\n        this.window_owner_container = document.getElementById('window_owner_container')\n        this.attack_cards_area = document.getElementById('attack_cards_area')\n        this.defend_cards_area = document.getElementById('defend_cards_area')\n        // this.own_panel_info_panel = document.querySelector('#own_panel .info_panel')\n        // this.own_panel_control_panel = document.querySelector('#playground .cards_area')\n        // this.own_panel_cards_area = document.querySelector('#own_panel .cards_area')\n        this.deck_container = document.getElementById('deck')\n        this.cards_removed_from_the_game = []\n        this.cards_removed_from_the_game_container = document.getElementById('cards_removed_from_the_game')\n        this.btn_start_game = document.getElementById('btn_start_game')\n        this.btn_attack = document.getElementById('btn_attack')\n        this.btn_defend = document.getElementById('btn_defend')\n        this.players = []\n        this.defend_addition_layer = {}\n\n        this.active_player = null\n        this.defender_player = null\n        this.window_owner_player = null\n\n        this.deck = new _deck__WEBPACK_IMPORTED_MODULE_1__.Deck(this)\n        this.attack_cards = []\n        this.defend_cards = []\n        this.trump = null\n        this.all_cards_dict = {}\n    }\n\n    redraw_players_cards() {\n        for (let i = 0; i < this.players.length; i++) {\n            this.players[i].redraw_cards();\n        }\n    }\n\n    all_players_take_more_cards() {\n        let cur_player = this.active_player\n        let counter = 0\n        while (this.deck.length > 0) {\n            if (cur_player.cards.length < 6) {\n                let card = this.deck.pop()\n                cur_player.take_card(card)\n            } else {\n                counter++\n            }\n            if (counter === this.players.length) {\n                break;\n            }\n            cur_player = this.get_next_player(cur_player)\n        }\n        this.run_game()\n    }\n\n    select_handle_for_attack() {\n        let suit = this.getAttribute('data-suit')\n        let val = +this.getAttribute('data-val')\n        let idx = Array.from(this.parentNode.children).indexOf(this)\n        let game = window.game\n        let cc = game.active_player.cards[idx]\n        if (game.active_player.selected_cards.indexOf(cc) !== -1) {\n            game.active_player.deselect(cc)\n        } else if (game.active_player.selected_cards.length === 0) {\n            game.active_player.selected_cards.push(cc)\n        } else {\n            for (let i = 0, ccc; i < game.active_player.selected_cards.length; i++) {\n                ccc = game.active_player.selected_cards[i]\n                if (ccc.val === val) {\n                    game.active_player.select(cc)\n                    return\n                }\n            }\n            cc.elem.classList.remove('selected')\n        }\n    }\n\n    select_handle_for_defend_1() {\n        let game = window.game\n        let suit = this.getAttribute('data-suit')\n        let val = +this.getAttribute('data-val')\n        let idx = Array.from(this.parentNode.children).indexOf(this)\n        let cc = game.defender_player.cards[idx]\n\n        if (game.defender_player.selected_cards.length === 0) {\n            let ac;\n            let selected = false\n            for (const key in game.defend_addition_layer) {\n                ac = game.defend_addition_layer[key]\n                if (ac.suit === suit && ac.val < val) {\n                    game.defender_player.select(cc)\n                    console.log('карта выбрана')\n                    selected = true\n                    break\n                }\n                if (ac.suit !== game.trump && suit === game.trump) {\n                    game.defender_player.select(cc)\n                    console.log('карта выбрана')\n                    selected = true\n                    break\n                }\n                if (ac.suit === game.trump && suit === game.trump && ac.val < val) {\n                    game.defender_player.select(cc)\n                    console.log('карта выбрана')\n                    selected = true\n                    break\n                }\n            }\n            if (selected !== true) {\n                console.log('невозможно выбрать карту')\n\n                this.classList.remove('selected')\n            }\n\n            // game.active_player.selected_cards.push(cc)\n        } else if (game.defender_player.selected_cards.indexOf(cc) !== -1) {\n            game.defender_player.deselect(cc)\n            console.log('карта развыбрана')\n        }\n    }\n\n    select_handle_for_defend_2() {\n        // TODO: realize\n        let game = window.game\n        let suit = this.getAttribute('data-suit')\n        let val = +this.getAttribute('data-val')\n        let idx = Array.from(this.parentNode.children).indexOf(this)\n        let cc = game.attack_cards[idx]\n        let ck = `${suit} + ${val}`\n\n        if (game.defender_player.selected_cards.length === 1) {\n\n            let selected_card = game.defender_player.selected_cards[0]\n            if (cc.suit === selected_card.suit && cc.val < selected_card.val) {\n                game.defender_player.defend_from(selected_card, cc)\n                selected_card.elem.classList.remove('selected')\n            } else if (cc.suit === game.trump && selected_card.suit === game.trump && cc.val < selected_card.val) {\n                game.defender_player.defend_from(selected_card, cc)\n                selected_card.elem.classList.remove('selected')\n            } else if (cc.suit !== game.trump && selected_card.suit === game.trump) {\n                game.defender_player.defend_from(selected_card, cc)\n                selected_card.elem.classList.remove('selected')\n            }\n        }\n        this.classList.remove('selected')\n    }\n\n    player_attack() {\n        let game = window.game\n        game.active_player.attack()\n        let result;\n        if (game.defender_player.player_type === 'bot') {\n            result = game.defender_player.defender_behavior()\n        }\n        console.log(game.defender_player.title, result)\n        if (result === _variables__WEBPACK_IMPORTED_MODULE_2__.DEFENDED) {\n            for (let i = 0; i < game.attack_cards.length; i++) {\n                game.remove_card_from_the_game(game.attack_cards[i])\n            }\n            for (let i = 0; i < game.defend_cards.length; i++) {\n                game.remove_card_from_the_game(game.defend_cards[i])\n            }\n            game.active_player = game.defender_player\n            setTimeout(() => {\n                game.run_game()\n            }, 1000)\n        } else {\n            for (let i = 0; i < game.attack_cards.length; i++) {\n                game.defender_player.take_card(game.attack_cards[i])\n            }\n            for (let i = 0; i < game.defend_cards.length; i++) {\n                game.defender_player.take_card(game.defend_cards[i])\n            }\n\n            let cur_player = game.active_player\n            game.next_player()\n            game.defender_player = game.get_next_player(cur_player)\n            setTimeout(() => {\n                game.run_game()\n            }, 1000)\n        }\n\n    }\n\n    player_defend() {\n        let game = window.game\n        let prom = new Promise((resolve, reject) => {\n            let result = game.defender_player.defend()\n            this.removeEventListener('click', game.player_defend)\n            for (let i = 0, cc; i < game.defender_player.cards.length; i++) {\n                cc = game.defender_player.cards[i]\n                cc.elem.removeEventListener('click', game.select_handle_for_defend_1)\n            }\n            for (let i = 0, cc; i < game.attack_cards.length; i++) {\n                cc = game.attack_cards[i]\n                cc.elem.removeEventListener('click', game.select_handle_for_defend_2)\n            }\n            resolve(result)\n        })\n        prom.then(\n            (result) => {\n                console.log(result)\n                if (result === _variables__WEBPACK_IMPORTED_MODULE_2__.DEFENDED) {\n                    console.log('Сбросить все карты в утиль и запустить игру, переключив активного игрока на себя и защищающегося')\n                    for (let i = 0; i < game.attack_cards.length; i++) {\n                        game.remove_card_from_the_game(game.attack_cards[i])\n                    }\n                    for (let i = 0; i < game.defend_cards.length; i++) {\n                        game.remove_card_from_the_game(game.defend_cards[i])\n                    }\n                    game.active_player = game.defender_player\n                    setTimeout(() => {\n                        game.run_game()\n                    }, 1000)\n\n                } else {\n                    console.log('Мы берём карты и запускаем игру, переключив активного игрока и защищающегося')\n                    for (let i = 0; i < game.attack_cards.length; i++) {\n                        game.defender_player.take_card(game.attack_cards[i])\n                    }\n                    for (let i = 0; i < game.defend_cards.length; i++) {\n                        game.defender_player.take_card(game.defend_cards[i])\n                    }\n                    let cur_player = game.active_player\n                    game.defender_player.redraw_cards()\n                    game.next_player()\n                    game.defender_player = game.get_next_player(cur_player)\n                    game.run_game()\n                }\n            },\n            () => {\n            }\n        )\n    }\n\n    run_game() {\n        this.redraw_players_cards()\n        for (let i = 0; i < this.players.length; i++) {\n            this.players[i].set_status(_variables__WEBPACK_IMPORTED_MODULE_2__.WAITING)\n        }\n        this.active_player.set_status(_variables__WEBPACK_IMPORTED_MODULE_2__.ATTACK)\n        this.defender_player = this.get_next_player(this.active_player)\n        this.defender_player.set_status(_variables__WEBPACK_IMPORTED_MODULE_2__.DEFEND)\n        // донабрать карты\n        this.all_players_take_more_cards()\n        if (this.active_player.player_type === 'bot') {\n            // this.active_player.set_status(ATTACK)\n            this.active_player.attack_behavior()\n        } else if (this.active_player === this.window_owner_player) {\n            for (let i = 0, cc; i < this.active_player.cards.length; i++) {\n                cc = this.active_player.cards[i]\n                cc.elem.addEventListener('click', this.select_handle_for_attack)\n            }\n            debugger\n            this.btn_attack.addEventListener('click', this.player_attack)\n        }\n        if (this.defender_player.player_type === 'bot') {\n            this.defender_player.set_status(_variables__WEBPACK_IMPORTED_MODULE_2__.DEFEND)\n            // this.defender_player.defender_behavior()\n        } else if (this.defender_player === this.window_owner_player) {\n            console.log('Мы защищаемся')\n            this.defend_addition_layer = {}\n            for (let i = 0, cc; i < this.defender_player.cards.length; i++) {\n                cc = this.defender_player.cards[i]\n                cc.elem.addEventListener('click', this.select_handle_for_defend_1)\n            }\n            for (let i = 0, cc; i < this.attack_cards.length; i++) {\n                cc = this.attack_cards[i]\n                this.defend_addition_layer[cc.suit + cc.val] = {\n                    suit: cc.suit,\n                    val: cc.val,\n                    repel: null,\n                };\n                cc.elem.addEventListener('click', this.select_handle_for_defend_2)\n            }\n            this.btn_defend.addEventListener('click', this.player_defend)\n        }\n    }\n\n    set_first_player() {\n        let min_trump_val = 100\n        let min_trump_card = null\n        for (let i = 0, cp; i < this.players.length; i++) {\n            cp = this.players[i]\n            for (let j = 0, cc; j < cp.cards.length; j++) {\n                cc = cp.cards[j]\n                if (cc.suit === this.trump && cc.val < min_trump_val) {\n                    min_trump_val = cc.val\n                    min_trump_card = cc\n                    this.active_player = cp\n                }\n            }\n        }\n        if (min_trump_val === 100) {\n            this.active_player = this.players[0]\n        }\n        console.log('Первый игрок определён ->', this.active_player)\n        min_trump_card.show_face()\n        setTimeout(() => {\n            if (min_trump_card.elem.closest('#playground') === null || min_trump_card.elem.closest('#playground') === undefined) {\n                if (min_trump_card.elem.closest('#control_panel') === null || min_trump_card.elem.closest('#control_panel') === undefined) {\n                    min_trump_card.show_back()\n                }\n            }\n        }, 3000)\n    }\n\n    deal_card(this_game, counter, sum_deal_card_invoke) {\n        // let counter = 0\n        let promise = new Promise((resolve, reject) => {\n            this_game.next_player()\n            let card = this.deck.pop()\n            this_game.deck_container.removeChild(card.elem)\n            this_game.active_player.take_card(card)\n            card.elem.style.left = `${this_game.active_player.card_position}px`\n            this_game.active_player.card_position += 20\n            this_game.active_player.cards_container.appendChild(card.elem)\n            if (this_game.active_player === this_game.window_owner_player) {\n                card.show_face()\n            }\n            counter++\n            if (counter < sum_deal_card_invoke) {\n                setTimeout(() => {\n                    resolve();\n                }, 100);\n            } else {\n                reject();\n            }\n\n        })\n        promise.then(\n            () => {\n                this_game.deal_card(this_game, counter, sum_deal_card_invoke)\n            },\n            () => {\n                let prom = new Promise((resolve, reject) => {\n                    this_game.set_first_player()\n                    resolve()\n                })\n                prom.then(() => {\n                        this_game.run_game()\n                    }, () => {\n\n                    }\n                )\n\n            }\n        )\n    }\n\n    init() {\n        for (let i = 0, current_player; i < this.initial_game_state.players.length; i++) {\n            current_player = new _player__WEBPACK_IMPORTED_MODULE_0__.Player(this.initial_game_state.players[i], this)\n            if (client_id === current_player.player_id && current_player.player_type !== 'bot') {\n                this.window_owner_player = current_player\n                this.window_owner_container.appendChild(this.create_player_widget(current_player))\n                // this.init_own_panel()\n\n            } else {\n                this.opponents_container.appendChild(this.create_player_widget(current_player))\n            }\n            this.players.push(current_player)\n        }\n        this.init_deck()\n        this.btn_start_game.addEventListener('click', () => {\n            this.btn_start_game.classList.add('hidden')\n            for (let i = 0; i < this.players.length; i++) {\n                this.players[i].reset_card_positions()\n            }\n\n            let this_game = this\n            let sum_deal_card_invoke = this_game.players.length * 6\n            let counter = 0\n            this.deal_card(this_game, counter, sum_deal_card_invoke)\n        })\n    }\n\n    next_player() {\n        if (this.active_player === null) {\n            this.active_player = this.players[0]\n        } else {\n            this.active_player = this.get_next_player(this.active_player)\n        }\n        console.log('Активный игрок ->', this.active_player.title)\n    }\n\n    get_next_player(player) {\n        let idx = this.players.indexOf(player)\n        idx++\n        if (idx === this.players.length) {\n            return this.players[0]\n        } else {\n            return this.players[idx]\n        }\n    }\n\n    card_key(suit_key, val) {\n        return `${suit_key}_${val}`\n    }\n\n    init_own_panel() {\n        this.own_panel_info_panel.innerHTML = `Я - ${_variables__WEBPACK_IMPORTED_MODULE_2__.WAITING}`\n    }\n\n    init_deck() {\n        let new_card;\n        for (const suit_key in _variables__WEBPACK_IMPORTED_MODULE_2__.SUITS) {\n            for (const val in _variables__WEBPACK_IMPORTED_MODULE_2__.CARD_VALUES) {\n                new_card = new _deck__WEBPACK_IMPORTED_MODULE_1__.Card(\n                    suit_key,\n                    _variables__WEBPACK_IMPORTED_MODULE_2__.SUITS[suit_key].color,\n                    _variables__WEBPACK_IMPORTED_MODULE_2__.SUITS[suit_key].html_entity,\n                    val,\n                    _variables__WEBPACK_IMPORTED_MODULE_2__.CARD_VALUES[val]\n                )\n                this.all_cards_dict[this.card_key(suit_key, val)] = new_card\n                this.deck.push(new_card)\n            }\n        }\n        this.deck.shuffle()\n        for (let i = 0, cur_left_value = 0, cc; i < this.deck.length(); i++) {\n            cc = this.deck.item(i)\n            if (i === 0) {\n                cc.show_face()\n                cur_left_value += 10\n                this.trump = cc.suit\n                console.log('trump', this.trump)\n            } else {\n                cc.show_back()\n                cc.elem.style.left = `${cur_left_value}px`\n                cur_left_value += 2\n            }\n            this.deck_container.appendChild(cc.elem)\n        }\n    }\n\n    create_player_widget(player) {\n        let new_widget = document.createElement('div')\n        new_widget.classList.add('player_widget')\n        let opponents_title = document.createElement('div')\n        opponents_title.classList.add('opponent_title')\n        let opponents_name = document.createElement('span')\n        opponents_name.classList.add('opponent_name')\n        opponents_name.innerHTML = player.toString() + ' -&nbsp;'\n        opponents_title.appendChild(opponents_name)\n        let opponents_status = document.createElement('span')\n        opponents_status.classList.add('opponents_status')\n        opponents_status.innerText = _variables__WEBPACK_IMPORTED_MODULE_2__.WAITING\n        opponents_title.appendChild(opponents_status)\n        new_widget.append(opponents_title)\n        let opponents_cards = document.createElement('div')\n        opponents_cards.classList.add('opponents_cards')\n        new_widget.append(opponents_cards)\n        player.player_widget = new_widget\n        player.status_elem = opponents_status\n        player.cards_container = opponents_cards\n        return new_widget\n    }\n\n    remove_card_from_the_game(card) {\n        this.cards_removed_from_the_game_container.appendChild(card.elem)\n        this.cards_removed_from_the_game.push(card)\n        let idx = this.cards_removed_from_the_game.indexOf(card)\n        card.elem.style.left = `${idx * 2}px`\n        console.log('Скинута карта', card.suit, card.val)\n    }\n}\n\nconst durak_game = new DurakGame(game_state, client_id);\ndurak_game.init()\nwindow.game = durak_game\n\n\n\n//# sourceURL=webpack://tudushnik-pack/./games/static/games/js/durak/index.js?");

/***/ }),

/***/ "./games/static/games/js/durak/player.js":
/*!***********************************************!*\
  !*** ./games/static/games/js/durak/player.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Player: () => (/* binding */ Player)\n/* harmony export */ });\n/* harmony import */ var _variables__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./variables */ \"./games/static/games/js/durak/variables.js\");\n\n\nclass Player {\n    constructor(title, game) {\n        this.game = game\n        this.title = title\n        let temp = title.split('_')\n        this.player_type = temp[0]\n        this.player_id = temp[1]\n        this.player_widget = null\n        this.cards_container = null\n        this.status_elem = null\n        this.cards = []\n        this.card_position = 0\n        this.selected_cards = []\n    }\n\n    attack_behavior() {\n        console.log('Поведение атакующего', this.title)\n        let min_nominal = 100\n        let target_card = null\n        for (let i = 0, cc; i < this.cards.length; i++) {\n            cc = this.cards[i]\n            if (cc.val < min_nominal) {\n                target_card = cc\n                min_nominal = cc.val\n            }\n        }\n        if (target_card === null) {\n            target_card = this.cards[0]\n        }\n        this.select(target_card)\n        this.attack()\n        let this_game = this.game\n        if (this.game.defender_player.player_type === 'bot') {\n            console.log('Защищается бот', this.game.defender_player.title)\n            let prom = new Promise((resolve, reject) => {\n                let result = this_game.defender_player.defender_behavior()\n                resolve(result)\n            })\n            prom.then(\n                (result) => {\n                    console.log(this_game.defender_player.player_id, result)\n                    if (result === _variables__WEBPACK_IMPORTED_MODULE_0__.TAKE_CARDS) {\n                        console.log('Бот забирает карты', this.game.defender_player.title)\n                        for (let i = 0; i < this.game.attack_cards.length; i++) {\n                            this.game.defender_player.take_card(this.game.attack_cards[i])\n                        }\n                        for (let i = 0; i < this.game.defend_cards.length; i++) {\n                            this.game.defender_player.take_card(this.game.defend_cards[i])\n                        }\n                        this.game.defender_player.redraw_cards()\n                        this.game.next_player()\n                        this.game.next_player()\n                        this.game.defender_player = this.game.get_next_player(this.game.active_player)\n                        this.game.run_game()\n                    }else{\n                        console.log('Скидываем карты в утиль')\n                        for (let i = 0; i < this.game.attack_cards.length; i++) {\n                            this.game.remove_card_from_the_game(this.game.attack_cards[i])\n                        }\n                        for (let i = 0; i < this.game.defend_cards.length; i++) {\n                            this.game.remove_card_from_the_game(this.game.defend_cards[i])\n                        }\n                        this.game.next_player()\n                        this.game.defender_player = this.game.get_next_player(this.game.active_player)\n                        this.game.run_game()\n                    }\n\n                },\n                () => {\n\n                }\n            )\n        }\n    }\n\n    defend_from(card, target_card) {\n        console.log('Картой защищаемся от другой карты', card, target_card)\n        let idx = Array.from(target_card.elem.parentNode.children).indexOf(target_card.elem)\n        let card_elem = this.cards_container.removeChild(card.elem)\n        card.show_face()\n        this.game.defend_cards.push(card)\n        this.game.defend_cards_area.appendChild(card_elem)\n        card_elem.style.left = `${idx * 60}px`\n\n    }\n\n    defend() {\n        if (this.game.attack_cards.length > this.game.defend_cards.length) {\n            return _variables__WEBPACK_IMPORTED_MODULE_0__.TAKE_CARDS\n        } else {\n            return _variables__WEBPACK_IMPORTED_MODULE_0__.DEFENDED\n        }\n    }\n\n    defender_behavior() {\n        console.log('Поведение защищающегося', this.title)\n        for (let i = 0, cc, s; i < this.game.attack_cards.length; i++) {\n            cc = this.game.attack_cards[i]\n            s = cc.suit\n            for (let j = this.cards.length - 1, ccc; j >= 0; j--) {\n                ccc = this.cards[j]\n                if (ccc.suit === s && ccc.val > cc.val) {\n                    this.defend_from(ccc, cc)\n                    break\n                }\n            }\n        }\n        return this.defend()\n    }\n\n    select(card) {\n        this.selected_cards.push(card)\n    }\n\n    deselect(card) {\n        let idx = this.selected_cards.indexOf(card)\n        card.elem.classList.remove('selected')\n        return this.selected_cards.splice(idx, 1)\n    }\n\n    attack() {\n        console.log(`${this.title} атакует`)\n        for (let i = this.selected_cards.length - 1, cc; i >= 0; i--) {\n            cc = this.selected_cards[i]\n            this.deselect(cc)\n            cc.show_face()\n            this.game.attack_cards_area.appendChild(cc.elem)\n            this.game.attack_cards.push(cc)\n            let idx = this.cards.indexOf(cc)\n            this.cards.splice(idx,1)\n        }\n    }\n\n    reset_card_positions() {\n        this.card_position = 0\n    }\n\n    redraw_cards() {\n        console.log('Перерисовка карт', this.title)\n        this.reset_card_positions()\n        for (let i = 0, cc; i < this.cards.length; i++) {\n            cc = this.cards[i]\n            cc.elem.style.left = `${this.card_position * 30}px`\n            this.card_position++\n        }\n    }\n\n    toString() {\n        return `${this.player_type}_${this.player_id}`\n    }\n\n    take_card(card) {\n        if (this.cards.indexOf(card) === -1) {\n            this.cards.push(card)\n        }\n        this.cards_container.appendChild(card.elem)\n    }\n\n    set_status(status) {\n        this.status_elem.innerText = status\n        console.log(this.title, 'статус ->', this.status_elem.innerText)\n    }\n}\n\n\n\n//# sourceURL=webpack://tudushnik-pack/./games/static/games/js/durak/player.js?");

/***/ }),

/***/ "./games/static/games/js/durak/utils.js":
/*!**********************************************!*\
  !*** ./games/static/games/js/durak/utils.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   shuffle: () => (/* binding */ shuffle)\n/* harmony export */ });\nfunction shuffle(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n}\n\n\n\n//# sourceURL=webpack://tudushnik-pack/./games/static/games/js/durak/utils.js?");

/***/ }),

/***/ "./games/static/games/js/durak/variables.js":
/*!**************************************************!*\
  !*** ./games/static/games/js/durak/variables.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ATTACK: () => (/* binding */ ATTACK),\n/* harmony export */   CARD_VALUES: () => (/* binding */ CARD_VALUES),\n/* harmony export */   DEFEND: () => (/* binding */ DEFEND),\n/* harmony export */   DEFENDED: () => (/* binding */ DEFENDED),\n/* harmony export */   SUITS: () => (/* binding */ SUITS),\n/* harmony export */   TAKE_CARDS: () => (/* binding */ TAKE_CARDS),\n/* harmony export */   WAITING: () => (/* binding */ WAITING)\n/* harmony export */ });\nconst WAITING = 'Ожидание'\nconst ATTACK = 'Нападение'\nconst DEFEND = 'Защита'\nconst TAKE_CARDS = 'Забирает карты'\nconst DEFENDED = 'Отбился'\nconst SUITS = {\n    'Bu': {color: 'red', html_entity: '&diams;'},\n    'Ch': {color: 'red', html_entity: '&hearts;'},\n    'Tr': {color: 'black', html_entity: '&clubs;'},\n    'Pi': {color: 'black', html_entity: '&spades;'}\n}\nconst CARD_VALUES = {\n    '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7,\n    '8': 8, '9': 9, '10': 10, 'J': 11, 'Q': 12, 'K': 13, 'A': 14,\n}\n\n\n\n//# sourceURL=webpack://tudushnik-pack/./games/static/games/js/durak/variables.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./games/static/games/js/durak/index.js");
/******/ 	
/******/ })()
;